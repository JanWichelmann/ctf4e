@using Ctf4e.LabServer.ViewModels
@using Ctf4e.LabServer.Configuration
@using Ctf4e.LabServer.Configuration.Exercises
@using Ctf4e.LabServer.InputModels
@using Ctf4e.LabServer.Options
@using Microsoft.Extensions.Options
@inject IOptionsSnapshot<LabOptions> LabOptions
@{
    ViewData["Title"] = "Lösungen einreichen";

    var userScoreboard = (UserScoreboard)ViewData["Scoreboard"];
    var adminMode = (bool)ViewData["AdminMode"];
    var labConfiguration = (LabConfiguration)ViewData["LabConfiguration"];
}

<div class="container">
@if(adminMode)
{
    <div class="float-end">
        <a class="btn btn-sm btn-outline-primary" href="#log-table">
            <i class="bi bi-chevron-down"></i>
            Log
        </a>
    </div>
}

<h3 class="header">
    Lösungen einreichen
</h3>
<hr class="header">

@foreach(var exercise in userScoreboard.Exercises)
{
    <div class="card mb-3">
        <div class="card-header container">
            <div class="row">
                <div class="col fs-5">
                    @if(exercise.Solved)
                    {
                        <i class="bi bi-check-circle-fill text-success" title="Aufgabe gelöst"></i>
                    }
                    else if(exercise.SolvedByGroupMember)
                    {
                        if(labConfiguration.PassAsGroup)
                        {
                            <i class="bi bi-check-circle text-success" title="Aufgabe von Gruppenmitglied gelöst (genügt zum Bestehen)"></i>
                        }
                        else
                        {
                            <i class="bi bi-x-circle text-success" title="Aufgabe von Gruppenmitglied gelöst (muss noch selbst gelöst werden)"></i>
                        }
                    }
                    else
                    {
                        <i class="bi bi-x-circle text-secondary" title="Aufgabe ausstehend"></i>
                    }

                    @if(string.IsNullOrEmpty(exercise.Exercise.Link)) // "IsNullOrEmpty" instead of "== null" is a used as a workaround for https://github.com/dotnet/runtime/issues/36510
                    {
                        @exercise.Exercise.Title
                    }
                    else
                    {
                        <a href="@exercise.Exercise.Link" target="_blank">@exercise.Exercise.Title</a>
                        <i class="bi bi-link-45deg" title="Der Aufgabentitel ist ein Link"></i>
                    }
                </div>
                <div class="col-auto ms-auto">
                    @if(adminMode)
                    {
                        <span class="badge bg-dark me-1 font-monospace">
                            #@exercise.Exercise.Id
                            @if(exercise.Exercise.CtfExerciseNumber != null)
                            {
                                <span title="Standardaufgabe">
                                    <i class="bi bi-arrow-right"></i>
                                    CTF#@exercise.Exercise.CtfExerciseNumber
                                </span>
                            }
                            @if(exercise.Exercise.FlagCode != null)
                            {
                                <span title="Flag-Aufgabe">
                                    <i class="bi bi-arrow-right"></i>
                                    <i class="bi bi-flag"></i>
                                </span>
                            }
                        </span>
                        <button class="btn btn-sm btn-success" data-bs-toggle="modal" data-bs-target="#modal-mark-exercise-solved" data-exerciseid="@exercise.Exercise.Id" data-exercisename="@exercise.Exercise.Title" title="(Admin) Als gelöst markieren">
                            <i class="bi bi-check-circle-fill"></i>
                            Bestehen
                        </button>
                        <button class="btn btn-sm btn-danger" data-bs-toggle="modal" data-bs-target="#modal-reset-exercise" data-exerciseid="@exercise.Exercise.Id" data-exercisename="@exercise.Exercise.Title" title="(Admin) Zurücksetzen">
                            <i class="bi bi-check-circle-fill"></i>
                            Zurücksetzen
                        </button>
                    }
                </div>
            </div>
        </div>

        @if(exercise.Solved && !string.IsNullOrEmpty(exercise.Exercise.FlagCode))
        {
            <div class="card-body border-bottom">
                <i class="bi bi-flag-fill"></i>
                <span class="font-monospace">@exercise.Exercise.FlagCode</span>
            </div>
        }

        <div class="card-body">
            @if(!string.IsNullOrEmpty(exercise.Description))
            {
                <p class="card-text">
                    @Html.Raw(exercise.Description)
                </p>
            }

            @if(exercise.Exercise.Type == LabConfigurationExerciseEntryType.String)
            {
                var exerciseData = (LabConfigurationStringExerciseEntry)exercise.Exercise;

                var lastInput = ViewData.ContainsKey("LastStringInput") ? (StringExerciseInputData)ViewData["LastStringInput"] : null;
                if(lastInput?.ExerciseId != exercise.Exercise.Id)
                {
                    lastInput = null;
                }

                <form class="form" method="post" asp-controller="Group" asp-action="CheckStringInput">
                    <div class="mb-3">
                        @if(exerciseData.Multiline)
                        {
                            <textarea class="form-control font-monospace" name="input" placeholder="Lösung eingeben" rows="5">@(lastInput?.Input ?? "")</textarea>
                        }
                        else
                        {
                            <input type="text" class="form-control font-monospace" name="input" placeholder="Lösung eingeben" value="@(lastInput?.Input ?? "")">
                        }
                    </div>

                    <input type="hidden" name="exerciseId" value="@exercise.Exercise.Id">

                    <button type="submit" class="btn btn-primary">
                        Überprüfen
                    </button>
                </form>            }
            else if(exercise.Exercise.Type == LabConfigurationExerciseEntryType.MultipleChoice)
            {
                var exerciseData = (LabConfigurationMultipleChoiceExerciseEntry)exercise.Exercise;

                var lastInput = ViewData.ContainsKey("LastMultipleChoiceInput") ? (MultipleChoiceExerciseInputData)ViewData["LastMultipleChoiceInput"] : null;
                if(lastInput?.ExerciseId != exercise.Exercise.Id)
                {
                    lastInput = null;
                }

                <form class="form" method="post" asp-controller="Group" asp-action="CheckMultipleChoiceInput">
                    <div class="mb-3">
                        @for(int i = 0; i < exerciseData.Options.Length; ++i)
                        {
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" name="selectedOptions[]" value="@i" id="option-@i" @(lastInput?.SelectedOptions?.Contains(i) ?? false ? "checked" : "")>
                                <label class="form-check-label" for="option-@i">
                                    @exerciseData.Options[i].Value
                                </label>
                            </div>
                        }
                    </div>

                    <input type="hidden" name="exerciseId" value="@exercise.Exercise.Id">

                    <button type="submit" class="btn btn-primary">
                        Überprüfen
                    </button>
                </form>            }
            else if(exercise.Exercise.Type == LabConfigurationExerciseEntryType.Script)
            {
                var exerciseData = (LabConfigurationScriptExerciseEntry)exercise.Exercise;

                var lastInput = ViewData.ContainsKey("LastScriptInput") ? (ScriptExerciseInputData)ViewData["LastScriptInput"] : null;
                if(lastInput?.ExerciseId != exercise.Exercise.Id)
                {
                    lastInput = null;
                }

                <form class="form" method="post" asp-controller="Group" asp-action="CheckScriptInput">
                    @if(exerciseData.StringInput)
                    {
                        <div class="mb-3">
                            @if(exerciseData.Multiline)
                            {
                                <textarea class="form-control" name="input" placeholder="Lösung eingeben" rows="5">@(lastInput?.Input ?? "")</textarea>
                            }
                            else
                            {
                                <input type="text" class="form-control text-monospace" name="input" placeholder="Lösung eingeben" value="@(lastInput?.Input ?? "")">
                            }
                        </div>
                    }

                    <input type="hidden" name="exerciseId" value="@exercise.Exercise.Id">

                    <button type="submit" class="btn btn-primary">
                        Überprüfen
                    </button>
                </form>            }
        </div>
    </div>
}

@if(userScoreboard.DockerUserName != null && userScoreboard.DockerPassword != null)
{
    <h5 class="header">Zugangsdaten</h5>
    <hr class="header-secondary">

    <div class="mb-3">
        <label for="input-docker-username">Benutzername</label>
        <div class="input-group">
            <input id="input-docker-username" type="text" class="form-control font-monospace" readonly value="@userScoreboard.DockerUserName">
            <button class="btn btn-outline-secondary" type="button" data-bs-toggle="tooltip" data-placement="bottom" title="Kopieren" data-clipboard-target="#input-docker-username">
                <i class="bi bi-nomargin bi-clipboard"></i>
            </button>
        </div>
    </div>
    <div class="mb-3">
        <label for="input-docker-password">Passwort</label>
        <div class="input-group">
            <input id="input-docker-password" type="text" class="form-control font-monospace" readonly value="@userScoreboard.DockerPassword">
            <button class="btn btn-outline-secondary" type="button" data-bs-toggle="tooltip" data-placement="bottom" title="Kopieren" data-clipboard-target="#input-docker-password">
                <i class="bi bi-nomargin bi-clipboard"></i>
            </button>
        </div>
    </div>

    <script src="~/lib/clipboard/js/clipboard.min.js"></script>
    <script>
        window.addEventListener("load", function()
        {
            // Setup clipboard buttons
            new ClipboardJS(".btn");
        });
    </script>
}

@if(adminMode)
{
    <h5 class="header">Log</h5>
    <hr class="header-secondary">

    <p>
        Das Log ist auf <strong>@LabOptions.Value.UserStateLogSize</strong> Einträge beschränkt.
    </p>

    <table class="table" id="log-table">
        <tr>
            <th scope="col">Timestamp</th>
            <th scope="col">Nachricht</th>
        </tr>
        @foreach(var entry in userScoreboard.Log)
        {
            <tr>
                <td>@entry.timestamp.ToString("yyyy-MM-dd HH:mm:ss")</td>
                <td>
                    @entry.message
                    @if(!string.IsNullOrWhiteSpace(entry.data))
                    {
                        <br>
                        <code class="border bg-light p-1">@entry.data</code>
                    }
                </td>
            </tr>
        }
    </table>

    <div class="modal fade" id="modal-mark-exercise-solved" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <form asp-controller="Group" asp-action="MarkExerciseAsSolved" method="post">
                    <div class="modal-header">
                        <h5 class="modal-title">Aufgabe als gelöst markieren</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <p>
                            Soll die Aufgabe <span class="font-weight-bold" data-replace="exercise-name"></span> wirklich als gelöst markiert werden?
                        </p>
                        <p>
                            Hinweis: Dies löst ebenfalls eine Benachrichtigung an das CTF-System aus.
                        </p>
                    </div>
                    <div class="modal-footer">
                        <input type="hidden" name="exerciseId" data-replace="exercise-id">

                        <button type="submit" class="btn btn-outline-success">Lösen</button>
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Abbrechen</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
    <div class="modal fade" id="modal-reset-exercise" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <form asp-controller="Group" asp-action="ResetExerciseStatus" method="post">
                    <div class="modal-header">
                        <h5 class="modal-title">Aufgabe zurücksetzen</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <p>
                            Soll die Aufgabe <span class="font-weight-bold" data-replace="exercise-name"></span> wirklich zurückgesetzt werden?
                        </p>
                        <p>
                            Hinweis: Dies setzt lediglich den Status der Aufgabe auf diesem Server zurück;
                            existierende Einreichungen im CTF-System bleiben unberührt und müssen manuell gelöscht werden.
                        </p>
                    </div>
                    <div class="modal-footer">
                        <input type="hidden" name="exerciseId" data-replace="exercise-id">

                        <button type="submit" class="btn btn-outline-danger">Zurücksetzen</button>
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Abbrechen</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
    <script>
            document.getElementById("modal-mark-exercise-solved").addEventListener("show.bs.modal", function(e)
            {
                e.target.querySelector('input[data-replace="exercise-id"]').value = e.relatedTarget.dataset.exerciseid;
                e.target.querySelector('span[data-replace="exercise-name"]').innerText = e.relatedTarget.dataset.exercisename;
            });
            document.getElementById("modal-reset-exercise").addEventListener("show.bs.modal", function(e)
            {
                e.target.querySelector('input[data-replace="exercise-id"]').value = e.relatedTarget.dataset.exerciseid;
                e.target.querySelector('span[data-replace="exercise-name"]').innerText = e.relatedTarget.dataset.exercisename;
            });
        </script>
}
</div>