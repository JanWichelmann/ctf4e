@using Ctf4e.LabServer.ViewModels
@using Ctf4e.LabServer.Configuration
@using Ctf4e.LabServer.Configuration.Exercises
@using Ctf4e.LabServer.InputModels
@{
    ViewData["Title"] = "Lösungen einreichen";

    var groupScoreboard = (UserScoreboard)ViewData["Scoreboard"];
    var adminMode = (bool)ViewData["AdminMode"];
    var labConfiguration = (LabConfiguration)ViewData["LabConfiguration"];
}

<h3 class="text-primary">
    Lösungen einreichen
</h3>
<hr class="bg-primary" style="height: 2px;">

@foreach(var exercise in groupScoreboard.Exercises)
{
    <div class="card mb-3">
        <h5 class="card-header">
            @if(exercise.Solved)
            {
                <span class="oi oi-circle-check small text-success" title="Aufgabe gelöst"></span>
            }
            else if(exercise.SolvedByGroupMember)
            {
                if(labConfiguration.PassAsGroup)
                {
                    <span class="oi oi-circle-check small text-success" title="Aufgabe von Gruppenmitglied gelöst (genügt zum Bestehen)"></span>
                }
                else
                {
                    <span class="oi oi-circle-check small text-secondary" title="Aufgabe von Gruppenmitglied gelöst (muss noch selbst gelöst werden)"></span>
                }
            }

            @if(string.IsNullOrEmpty(exercise.Exercise.Link)) // "IsNullOrEmpty" is a used as a workaround for https://github.com/dotnet/runtime/issues/36510
            {
                @exercise.Exercise.Title
            }
            else
            {
                <a href="@exercise.Exercise.Link" target="_blank">@exercise.Exercise.Title</a>
            }

            @if(adminMode)
            {
                <div class="float-right p-0">
                    <span class="oi oi-star small" title="Admin-Menü"></span>
                    <a role="button" class="btn-sm btn-success oi oi-check" href="#" data-toggle="modal" data-target="#modal-mark-exercise-solved" data-exercise-id="@exercise.Exercise.Id" data-exercise-name="@exercise.Exercise.Title" title="(Admin) Als gelöst markieren"></a>
                    <a role="button" class="btn-sm btn-danger oi oi-action-undo" href="#" data-toggle="modal" data-target="#modal-reset-exercise" data-exercise-id="@exercise.Exercise.Id" data-exercise-name="@exercise.Exercise.Title" title="(Admin) Zurücksetzen"></a>
                </div>
            }
        </h5>

        @if(exercise.Solved && !string.IsNullOrEmpty(exercise.Exercise.FlagCode))
        {
            <div class="card-body text-monospace">
                @exercise.Exercise.FlagCode
            </div>
        }

        <div class="card-body">
            @if(!string.IsNullOrEmpty(exercise.Description))
            {
                <p class="card-text">
                    @Html.Raw(exercise.Description)
                </p>
            }

            @if(exercise.Exercise.Type == LabConfigurationExerciseEntryType.String)
            {
                var lastInput = ViewData.ContainsKey("LastStringInput") ? (StringExerciseInputData)ViewData["LastStringInput"] : null;
                if(lastInput?.ExerciseId != exercise.Exercise.Id)
                {
                    lastInput = null;
                }

                <form class="form" method="post" asp-controller="Group" asp-action="CheckMultipleChoiceInputAsync">
                    <div class="form-group">
                        <input type="text" class="form-control text-monospace" name="input" placeholder="Lösung eingeben" value="@(lastInput?.Input ?? "")">
                    </div>

                    <input type="hidden" name="exerciseId" value="@exercise.Exercise.Id">

                    <button type="submit" class="btn btn-primary">
                        Überprüfen
                    </button>
                </form>
            }
            else if(exercise.Exercise.Type == LabConfigurationExerciseEntryType.MultipleChoice)
            {
                var exerciseData = (LabConfigurationMultipleChoiceExerciseEntry)exercise.Exercise;
                
                var lastInput = ViewData.ContainsKey("LastMultipleChoiceInput") ? (MultipleChoiceExerciseInputData)ViewData["LastMultipleChoiceInput"] : null;
                if(lastInput?.ExerciseId != exercise.Exercise.Id)
                {
                    lastInput = null;
                }

                <form class="form" method="post" asp-controller="Group" asp-action="CheckMultipleChoiceInputAsync">
                    <div class="form-group">
                        @for(int i = 0; i < exerciseData.Options.Length; ++i)
                        {
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" name="selectedOptions[]" value="@i" id="option-@i" @(lastInput?.SelectedOptions?.Contains(i) ?? false ? "checked" : "")>
                                <label class="form-check-label" for="option-@i">
                                    @exerciseData.Options[i].Value
                                </label>
                            </div>
                        }
                    </div>

                    <input type="hidden" name="exerciseId" value="@exercise.Exercise.Id">

                    <button type="submit" class="btn btn-primary">
                        Überprüfen
                    </button>
                </form>
            }
        </div>
    </div>
}

@if(adminMode)
{
    <div class="modal fade" id="modal-mark-exercise-solved" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <form asp-controller="Group" asp-action="MarkExerciseAsSolvedAsync" method="post">
                    <div class="modal-header">
                        <h5 class="modal-title">Aufgabe als gelöst markieren</h5>
                        <button type="button" class="close" data-dismiss="modal">
                            <span>&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <p>
                            Soll die Aufgabe <span class="font-weight-bold" data-replace="exercise-name"></span> wirklich als gelöst markiert werden?
                        </p>
                        <p>
                            Hinweis: Dies löst ebenfalls eine Benachrichtigung an das CTF-System aus.
                        </p>
                    </div>
                    <div class="modal-footer">
                        <input type="hidden" name="exerciseId" data-replace="exercise-id">
                        @Html.AntiForgeryToken()
                        <button type="submit" class="btn btn-outline-success">Lösen</button>
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Abbrechen</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
    <div class="modal fade" id="modal-reset-exercise" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <form asp-controller="Group" asp-action="ResetExerciseStatusAsync" method="post">
                    <div class="modal-header">
                        <h5 class="modal-title">Aufgabe zurücksetzen</h5>
                        <button type="button" class="close" data-dismiss="modal">
                            <span>&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <p>
                            Soll die Aufgabe <span class="font-weight-bold" data-replace="exercise-name"></span> wirklich zurückgesetzt werden?
                        </p>
                        <p>
                            Hinweis: Dies setzt lediglich den Status der Aufgabe auf diesem Server zurück;
                            existierende Einreichungen im CTF-System bleiben unberührt und müssen manuell gelöscht werden.
                        </p>
                    </div>
                    <div class="modal-footer">
                        <input type="hidden" name="exerciseId" data-replace="exercise-id">
                        @Html.AntiForgeryToken()
                        <button type="submit" class="btn btn-outline-danger">Zurücksetzen</button>
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Abbrechen</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
    <script>
        $('#modal-mark-exercise-solved').on('show.bs.modal', function (e) {
            var exerciseId = $(e.relatedTarget).data('exercise-id');
            var exerciseName = $(e.relatedTarget).data('exercise-name');
            $(e.currentTarget).find('input[data-replace="exercise-id"]').val(exerciseId);
            $(e.currentTarget).find('span[data-replace="exercise-name"]').text(exerciseName);
        });
        $('#modal-reset-exercise').on('show.bs.modal', function (e) {
            var exerciseId = $(e.relatedTarget).data('exercise-id');
            var exerciseName = $(e.relatedTarget).data('exercise-name');
            $(e.currentTarget).find('input[data-replace="exercise-id"]').val(exerciseId);
            $(e.currentTarget).find('span[data-replace="exercise-name"]').text(exerciseName);
        });
    </script>
}