@using System.Text.Json
@using Ctf4e.LabServer.Services
@using Microsoft.AspNetCore.Mvc.Localization
@using Microsoft.AspNetCore.Mvc.TagHelpers
@inject IViewLocalizer Localizer                              
@inject ILabConfigurationService LabConfigurationService
@model Ctf4e.LabServer.InputModels.AdminConfigurationInputModel
@{
    ViewData["Title"] = Localizer["HtmlTitle"];

    var configFiles = LabConfigurationService.GetConfigurationFilePaths();
}

<div class="container">

    <div class="row mt-4 align-items-center">
        <div class="col">
            <h1 class="mb-0">
                @Localizer["Title"]
            </h1>
        </div>
        <div class="col-auto">
            <div class="dropdown">
                <button class="btn btn-sm btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    @Localizer["SwitchFile"]
                </button>
                <ul class="dropdown-menu dropdown-menu-end">
                    @foreach(var file in configFiles)
                    {
                        <li>
                            <a class="dropdown-item @(file == Model.FileToChange ? "fw-bold" : "")" asp-controller="AdminConfiguration" asp-action="ShowForm" asp-route-configurationFile="@file">
                                @file
                            </a>
                        </li>
                    }
                </ul>
            </div>
        </div>
    </div>
    <div class="header-rule"></div>   
    
    <h2 class="mt-5 font-monospace">@Model.FileToChange</h2>
    <hr class="header-secondary">

    <p class="text-danger font-weight-bold">
        @Localizer["WarningText"]
    </p>

    <div class="mb-3" id="json-editor"></div>

    <form method="post" asp-controller="AdminConfiguration" asp-action="UpdateConfiguration">
        <input type="hidden" asp-for="FileToChange">
        <input type="hidden" asp-for="Configuration" id="input-json">
        <input type="hidden" asp-for="Writable">

        @if(Model.Writable)
        {
            <button type="button" class="btn btn-outline-danger" id="submit-button">
                @Localizer["Form:Submit"]
            </button>
        }
    </form>
</div>

<script type="module">
    import { JSONEditor } from '@Url.Content("/lib/vanilla-jsoneditor/js/standalone.js")';
    
    let jsonContent = {
        text: "@Html.Raw(JsonEncodedText.Encode(Model.Configuration))"
    };
    
    const editor = new JSONEditor({
        target: document.getElementById('json-editor'),
        props: {
            content: jsonContent
        },
        readOnly: @(Model.Writable ? "false" : "true")
    });   
    
    const submitButton = document.getElementById('submit-button');
    submitButton.addEventListener('click', () => {                                 
        let content = editor.get();
        document.getElementById('input-json').value = content.text ?? JSON.stringify(content.json);
        submitButton.form.submit();
    });
</script>