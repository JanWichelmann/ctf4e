@using Ctf4e.Server.Controllers
@using Ctf4e.Server.Models
@model Ctf4e.Server.Models.Exercise
@{
    ViewData["Title"] = "Aufgaben verwalten";

    var viewType = (AdminExercisesController.ViewType)ViewData["ViewType"];
    var lab = (Lab)ViewData["Lab"];
}

@if(viewType == AdminExercisesController.ViewType.ListExercises)
{
    var exercises = (List<Exercise>)ViewData["Exercises"];

    <h3 class="text-primary">
        Aufgaben von Praktikum &quot;@lab.Name&quot; verwalten
    </h3>
    <hr class="bg-primary" style="height: 2px">
    <p>
        <a class="text-primary" href="@(Url.Action<AdminLabsController>(nameof(AdminLabsController.RenderLabListAsync)))">
            <span class="oi oi-arrow-left"></span>
            Zurück zur Praktikumsliste
        </a>
    </p>
    <a role="button" class="btn btn-sm btn-primary" href="@(Url.Action<AdminExercisesController>(nameof(AdminExercisesController.ShowCreateExerciseFormAsync), new { labId = lab.Id }))">
        <span class="oi oi-plus"></span>
        Aufgabe erstellen
    </a>
    <table class="table table-sm table-bordered table-hover text-nowrap mt-2">
        <thead>
        <tr>
            <th scope="col">ID</th>
            <th scope="col">Nr.</th>
            <th scope="col">Name</th>
            <th scope="col">Basispunktzahl</th>
            <th scope="col">Strafpunkte</th>
            <th scope="col">Pflicht</th>
            <th scope="col">Vor-Beginn</th>
            <th scope="col">Aktionen</th>
        </tr>
        </thead>
        <tbody>
        @foreach(var e in exercises)
        {
            <tr>
                <td>@e.Id</td>
                <td>@e.ExerciseNumber</td>
                <td>@e.Name</td>
                <td>@e.BasePoints</td>
                <td>@e.PenaltyPoints</td>
                <td>
                    @if(e.IsMandatory)
                    {
                        <span class="oi oi-check text-success"></span>
                    }
                    else
                    {
                        <span class="oi oi-x text-danger"></span>
                    }
                </td>
                <td>
                    @if(e.IsPreStartAvailable)
                    {
                        <span class="oi oi-check text-success"></span>
                    }
                    else
                    {
                        <span class="oi oi-x text-danger"></span>
                    }
                </td>
                <td>
                    <a role="button" class="btn btn-sm btn-primary" href="@(Url.Action<AdminExercisesController>(nameof(AdminExercisesController.ShowEditExerciseFormAsync), new { id = e.Id }))">
                        <span class="oi oi-pencil"></span>
                        Bearbeiten
                    </a>
                    <a role="button" class="btn btn-sm btn-danger" href="#" data-toggle="modal" data-target="#modal-delete-exercise" data-exercise-id="@e.Id" data-exercise-name="@e.Name">
                        <span class="oi oi-trash"></span>
                        Löschen
                    </a>
                </td>
            </tr>
        }
        </tbody>
    </table>

    <div class="modal fade" id="modal-delete-exercise" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Aufgabe löschen</h5>
                    <button type="button" class="close" data-dismiss="modal">
                        <span>&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>
                        Wollen Sie die Aufgabe &quot;<span data-replace="exercise-name"></span>&quot; wirklich löschen?
                    </p>
                    <p>
                        Beachten Sie, dass hierbei auch alle bereits abgeschickten Lösungsversuche unwiderruflich gelöscht werden!
                    </p>
                </div>
                <div class="modal-footer">
                    <form action="@(Url.Action<AdminExercisesController>(nameof(AdminExercisesController.DeleteExerciseAsync)))" method="post">
                        <input type="hidden" data-replace="exercise-id" name="id" value="">
                        @Html.AntiForgeryToken()
                        <button type="submit" class="btn btn-outline-danger">Aufgabe löschen</button>
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Abbrechen</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
    <script>
        $('#modal-delete-exercise').on('show.bs.modal',
            function(e) {
                var exerciseId = $(e.relatedTarget).data('exercise-id');
                var exerciseName = $(e.relatedTarget).data('exercise-name');
                $(e.currentTarget).find('span[data-replace="exercise-name"]').text(exerciseName);
                $(e.currentTarget).find('input[data-replace="exercise-id"]').val(exerciseId);
            });
    </script>
}
else if(viewType == AdminExercisesController.ViewType.EditExercise)
{
    <h3 class="text-primary">
        Aufgabe bearbeiten
    </h3>
    <hr class="bg-primary" style="height: 2px">
    <form action="@(Url.Action<AdminExercisesController>(nameof(AdminExercisesController.EditExerciseAsync), new { id = Model.Id }))" method="post">
        <div class="form-group">
            <label asp-for="ExerciseNumber">Aufgabennummer</label>
            <input asp-for="ExerciseNumber" class="form-control">
            <span asp-validation-for="ExerciseNumber" class="text-danger"></span>
        </div>
        <div class="form-group">
            <label asp-for="Name">Name</label>
            <input asp-for="Name" class="form-control" placeholder="Namen eingeben">
            <span asp-validation-for="Name" class="text-danger"></span>
        </div>
        <div class="form-group">
            <label asp-for="BasePoints">Basispunktzahl</label>
            <input asp-for="BasePoints" class="form-control">
            <span asp-validation-for="BasePoints" class="text-danger"></span>
        </div>
        <div class="form-group">
            <label asp-for="PenaltyPoints">Strafpunkte pro Fehlversuch</label>
            <input asp-for="PenaltyPoints" class="form-control">
            <span asp-validation-for="PenaltyPoints" class="text-danger"></span>
        </div>
        <div class="form-group">
            <div class="form-check">
                <input asp-for="IsMandatory" class="form-check-input">
                <label asp-for="IsMandatory" class="form-check-label">Pflichtaufgabe</label>
            </div>
        </div>
        <div class="form-group">
            <div class="form-check">
                <input asp-for="IsPreStartAvailable" class="form-check-input">
                <label asp-for="IsPreStartAvailable" class="form-check-label">
                    In Vor-Beginn-Phase einreichbar<br/>
                    <small>
                        Dies steuert lediglich, ob diese Aufgabe in der Vor-Beginn-Phase eingereicht werden kann.
                        Bereits bestehende Einreichungen bleiben unangetastet und werden immer gewertet, sofern sie zwischen Vor-Beginn und Ende liegen.
                    </small>
                </label>
            </div>
        </div>

        <input asp-for="LabId" type="hidden">
        @Html.AntiForgeryToken()
        <button type="submit" class="btn btn-primary">Änderungen speichern</button>
    </form>
}
else if(viewType == AdminExercisesController.ViewType.CreateExercise)
{
    <h3 class="text-primary">
        Aufgabe erstellen
    </h3>
    <hr class="bg-primary" style="height: 2px">
    <form action="@(Url.Action<AdminExercisesController>(nameof(AdminExercisesController.CreateExerciseAsync)))" method="post">
        <div class="form-group">
            <label asp-for="ExerciseNumber">Aufgabennummer</label>
            <input asp-for="ExerciseNumber" class="form-control">
            <span asp-validation-for="ExerciseNumber" class="text-danger"></span>
        </div>
        <div class="form-group">
            <label asp-for="Name">Name</label>
            <input asp-for="Name" class="form-control" placeholder="Namen eingeben">
            <span asp-validation-for="Name" class="text-danger"></span>
        </div>
        <div class="form-group">
            <label asp-for="BasePoints">Basispunktzahl</label>
            <input asp-for="BasePoints" class="form-control">
            <span asp-validation-for="BasePoints" class="text-danger"></span>
        </div>
        <div class="form-group">
            <label asp-for="PenaltyPoints">Strafpunkte pro Fehlversuch</label>
            <input asp-for="PenaltyPoints" class="form-control">
            <span asp-validation-for="PenaltyPoints" class="text-danger"></span>
        </div>
        <div class="form-group">
            <div class="form-check">
                <input asp-for="IsMandatory" class="form-check-input">
                <label asp-for="IsMandatory" class="form-check-label">Pflichtaufgabe</label>
            </div>
        </div>
        <div class="form-group">
            <div class="form-check">
                <input asp-for="IsPreStartAvailable" class="form-check-input">
                <label asp-for="IsPreStartAvailable" class="form-check-label">
                    In Vor-Beginn-Phase einreichbar<br/>
                    <small>
                        Dies steuert lediglich, ob diese Aufgabe in der Vor-Beginn-Phase eingereicht werden kann.
                        Bereits bestehende Einreichungen bleiben unangetastet und werden immer gewertet, sofern sie zwischen Vor-Beginn und Ende liegen.
                    </small>
                </label>
            </div>
        </div>

        <input asp-for="LabId" type="hidden" value="@lab.Id">
        @Html.AntiForgeryToken()
        <button type="submit" class="btn btn-primary">Aufgabe erstellen</button>
    </form>
}