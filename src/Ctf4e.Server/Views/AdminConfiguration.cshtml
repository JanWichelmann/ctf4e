@using System.Globalization
@model Ctf4e.Server.ViewModels.AdminConfigurationData
@{
    ViewData["Title"] = "Konfiguration";

    int groupCount = (int)ViewData["GroupCount"];
}

<div class="container">
    <h3 class="header">
        Konfiguration bearbeiten
    </h3>
    <hr class="header-secondary">

    <p>Eingestellte Kultur: @CultureInfo.CurrentCulture.ToString()</p>
    <p>Eingestellte Zeitzone: @TimeZoneInfo.Local.ToString()</p>
    <p>Aktuelle Uhrzeit: @DateTime.Now.ToString(DateTimeFormats.DateAndTimeSeconds)</p>
    <p>Aktuelle Uhrzeit (UTC): @DateTime.UtcNow.ToString(DateTimeFormats.DateAndTimeSeconds)</p>

    <hr class="header-secondary">
    <form asp-controller="AdminConfiguration" asp-action="UpdateConfig" method="post">
        <div class="mb-3">
            <label class="form-label" asp-for="PageTitle">Seitentitel</label>
            <input asp-for="PageTitle" class="form-control">
            <span asp-validation-for="PageTitle" class="text-danger"></span>
            <small>
                Dieser Titel wird im HTML-<span class="text-monospace">&lt;title&gt;</span>-Element eingesetzt.
            </small>
        </div>
        <div class="mb-3">
            <label class="form-label" asp-for="NavbarTitle">Titel in Menüleiste</label>
            <input asp-for="NavbarTitle" class="form-control">
            <span asp-validation-for="NavbarTitle" class="text-danger"></span>
            <small>
                Dieser Titel wird oben links in der Menüleiste angezeigt.
            </small>
        </div>
        <div class="mb-3">
            <label class="form-label" asp-for="FlagMinimumPointsDivisor">Teiler für Flag-Minimalpunktzahl</label>
            <input asp-for="FlagMinimumPointsDivisor" id="input-flag-minimum-points-divisor" class="form-control">
            <span asp-validation-for="FlagMinimumPointsDivisor" class="text-danger"></span>
            <small>
                Die Flag-Basispunktzahl dividiert durch diese Zahl ergibt die Minimalpunktzahl, die für jede Flag garantiert gewährt wird.
            </small>
        </div>
        <div class="mb-3">
            <label class="form-label" asp-for="FlagHalfPointsSubmissionCount">Anzahl der Flageinreichungen bis Mittelwert der Punkte</label>
            <input asp-for="FlagHalfPointsSubmissionCount" id="input-flag-half-points-submission-count" class="form-control">
            <span asp-validation-for="FlagHalfPointsSubmissionCount" class="text-danger"></span>
            <small>
                Diese Zahl legt fest, bei wie vielen Flageinreichungen noch der Mittelwert zwischen Basispunktzahl und Minimalpunktzahl (<code>(basis+min)/2</code>) gewährt wird.
            </small>
        </div>
        <div class="mb-3">
            <label class="form-label" asp-for="ScoreboardEntryCount">Anzahl der angezeigten Einträge im offenen Scoreboard</label>
            <input asp-for="ScoreboardEntryCount" class="form-control">
            <span asp-validation-for="ScoreboardEntryCount" class="text-danger"></span>
            <small>
                Diese Zahl legt fest, wie viele Einträge im für alle Gruppen einsehbaren Scoreboard gezeigt werden.
                Diese Zahl kann unter bestimmten Umständen überschritten werden, wenn mehrere Gruppen auf demselben Platz sind,
                und diese sonst nicht alle gleichberechtigt angezeigt werden könnten.
            </small>
        </div>
        <div class="mb-3">
            <label class="form-label" asp-for="ScoreboardCachedSeconds">Scoreboard-Gültigkeitsdauer in Sekunden</label>
            <input asp-for="ScoreboardCachedSeconds" class="form-control">
            <span asp-validation-for="ScoreboardCachedSeconds" class="text-danger"></span>
            <small>
                Diese Zahl legt fest, wie viele Sekunden ein gecachtes Scoreboard gültig ist, bevor ein neues erzeugt wird.
                Ziel dieser Einstellung ist, die Datenbank zu entlasten, da hierfür mehrere große Queries ausgeführt werden müssen.
                Der Wert sollte anfangs möglichst niedrig angesetzt sein, und erst bei Bedarf erhöht werden.
            </small>
        </div>
        <div class="mb-3">
            <label class="form-label" asp-for="GroupSelectionPageText">Text auf Gruppenwahl-Seite</label>
            <textarea asp-for="GroupSelectionPageText" class="form-control font-monospace" rows="5"></textarea>
            <span asp-validation-for="GroupSelectionPageText" class="text-danger"></span>
            <p class="small">
                Dieser Text wird oben auf der Gruppenwahl-Seite angezeigt.
                Hier stehen Informationen, wie Gruppen gebildet werden und wie diese sich im CTF-System registrieren können.
                Dieses Textfeld unterstützt Markdown.
            </p>
            <a class="btn btn-sm btn-outline-secondary" asp-controller="Authentication" asp-action="ShowGroupForm" target="_blank">
                <i class="bi bi-arrow-return-right"></i>
                Gruppenwahl-Seite anzeigen
            </a>
        </div>
        <div class="mb-3">
            <label class="form-label" asp-for="GroupSizeMin">Minimale Gruppengröße</label>
            <input asp-for="GroupSizeMin" class="form-control">
            <span asp-validation-for="GroupSizeMin" class="text-danger"></span>
            <small>
                Diese Zahl legt fest, wie viele Mitglieder eine Gruppe mindestens haben muss.
                So muss sich jeder Teilnehmer nach Registrierung zu einer entsprechend großen Gruppe finden.
                Kleinere Gruppen können nur von Administratoren erstellt werden.
            </small>
        </div>
        <div class="mb-3">
            <label class="form-label" asp-for="GroupSizeMax">Maximale Gruppengröße</label>
            <input asp-for="GroupSizeMax" class="form-control">
            <span asp-validation-for="GroupSizeMax" class="text-danger"></span>
            <small>
                Diese Zahl legt fest, wie viele Mitglieder eine Gruppe maximal haben darf.
                Größere Gruppen können nur von Administratoren erstellt werden.
            </small>
        </div>
        <div class="mb-3">
            <div class="form-check">
                <input asp-for="PassAsGroup" class="form-check-input">
                <label asp-for="PassAsGroup" class="form-check-label">Als Gruppe bestehen</label>
                <br>
                <small>
                    Wenn diese Einstellung aktiv ist, werden alle Einreichungen auf Gruppenebene gewertet.
                    Somit ist es unerheblich, welcher Teilnehmer eine Aufgabe eingereicht hat.
                    Diese Einstellung hat keinen Einfluss auf die Wertung im Scoreboard.
                </small>
            </div>
        </div>

        <button type="submit" class="btn btn-primary">Änderungen speichern</button>
    </form>

    <h3 class="text-primary mt-5">
        Visualisierung der Flagpunkte
    </h3>
    <hr class="header-secondary">

    <p>
        Dies zeigt die Entwicklung der Flagpunktzahl abhängig von der Anzahl der Flag-Funde.
    </p>
    <div class="mb-3">
        <label class="form-label" for="input-flag-base-points">Flag-Basispunktzahl</label>
        <input type="number" min="1" id="input-flag-base-points" class="form-control" value="100">
    </div>
    <div class="mb-3">
        <label class="form-label" for="input-group-count">Anzahl der Gruppen</label>
        <input type="number" min="1" id="input-group-count" class="form-control" value="@(Math.Max(groupCount, 2))">
    </div>
    <canvas id="canvas-flag-points"></canvas>

    <script>
    let flagPointsChart;
    
    let inputFlagBasePoints = document.getElementById("input-flag-base-points");
    let inputGroupCount = document.getElementById("input-group-count");
    let inputFlagMinimumPointsDivisor = document.getElementById("input-flag-minimum-points-divisor");
    let inputFlagHalfPointsSubmissionCount = document.getElementById("input-flag-half-points-submission-count");

    function updateChart()
    {
        let flagBasePoints = Number(inputFlagBasePoints.value);
        let groupCount = Number(inputGroupCount.value);
        let minPointsDivisor = Number(inputFlagMinimumPointsDivisor.value);
        let minPointsMultiplier = 1.0 / minPointsDivisor;
        let halfPointsSubmissionCount = Number(inputFlagHalfPointsSubmissionCount.value);
        
        // Update labels
        console.log('g', groupCount);
        while (flagPointsChart.data.labels.length < groupCount)
            flagPointsChart.data.labels.push(flagPointsChart.data.labels.length + 1);
        while (flagPointsChart.data.labels.length > groupCount)
            flagPointsChart.data.labels.pop();
        
        flagPointsChart.data.datasets[0].data.length = groupCount;

        for (let i = 0; i < groupCount; i++) 
        {
            // For details see FlagPointService
            let amb = flagBasePoints - minPointsMultiplier * flagBasePoints;
            let points = (amb * Math.pow(2, (-i) / (halfPointsSubmissionCount - 1.0))) + (minPointsMultiplier * flagBasePoints);
            flagPointsChart.data.datasets[0].data[i] = Math.round(points);
        }

        flagPointsChart.update();
    }

    window.onload = function() 
    {
        let chartConfig = {
            type: 'line',
            data: {
                labels: [1, 2], // dummy
                datasets: [
                    {
                        label: "Flag-Punkte",
                        data: new Array(2).fill(0), // dummy
                        borderColor: "#003e80",
                        fill: false,
                        lineTension: 0
                    }
                ]
            },
            options: {
                animation: {
                    duration: 100   
                }
            }
        };
        
        let ctx = document.getElementById("canvas-flag-points").getContext('2d');
        flagPointsChart = new Chart(ctx, chartConfig);
        updateChart();
    }

    inputFlagBasePoints.addEventListener("change", updateChart);
    inputGroupCount.addEventListener("change", updateChart);
    inputFlagMinimumPointsDivisor.addEventListener("change", updateChart);
    inputFlagHalfPointsSubmissionCount.addEventListener("change", updateChart);
</script>
</div>

<!-- Necessary includes -->

@section ScriptsHead
{
    <script src="~/lib/chartjs/js/Chart.min.js"></script>
}